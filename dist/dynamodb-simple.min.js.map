{"version":3,"file":"dynamodb-simple.min.js","sources":["../lib/db.js","../lib/utils.js","../lib/lexer.js","../lib/parser.js","../lib/documentClient.js","../lib/index.js"],"sourcesContent":["const AWS = require('aws-sdk');\nlet db = undefined;\n\nexport function setup(accessKey, secret, region, endpoint) {\n  AWS.config.update({\n    accessKeyId: accessKey,\n    secretAccessKey: secret,\n    region: region\n  });\n  db = new AWS.DynamoDB.DocumentClient({ endpoint: endpoint });\n}\n\nexport function get() {\n  return db;\n}\n","export function formatType(type, value) {\n  switch(type) {\n    case 'NUMBER':\n      return parseFloat(value);\n    case 'BOOLEAN':\n      if (value === 'null') return null;\n      if (value === 'true') return true;\n      if (value === 'false') return false;\n    default:\n      return value;\n  }\n}\n\nexport function formatAttrAlias(attr) {\n  return attr.replace(/-/g, '').replace(/\\./g, '').replace(/@/g, '')\n}\n\nexport function fixCallback(callback) {\n  if (typeof callback !== 'function') callback = noop;\n  return callback;\n}\n\nexport function noop() {}\n","const SQL_FUNCTIONS = ['AVG', 'COUNT', 'MIN', 'MAX', 'SUM'];\nconst SQL_SORT_ORDERS = ['ASC', 'DESC'];\nconst SQL_OPERATORS = ['=', '!=', '>=', '>', '<=', '<>', '<', 'LIKE', 'IS NOT', 'IS'];\nconst SUB_SELECT_OP = ['IN', 'NOT IN', 'ANY', 'ALL', 'SOME'];\nconst SUB_SELECT_UNARY_OP = ['EXISTS'];\nconst SQL_CONDITIONALS = ['AND', 'OR'];\nconst BOOLEAN = ['TRUE', 'FALSE', 'NULL'];\nconst MATH = ['+', '-'];\nconst MATH_MULTI = ['/', '*'];\nconst STAR = /^\\*/;\nconst SEPARATOR = /^,/;\nconst WHITESPACE = /^[ \\n\\r]+/;\nconst LITERAL = /^`?([a-z_][a-z0-9_]{0,})`?/i;\nconst PARAMETER = /^\\$[0-9]+/;\nconst NUMBER = /^[0-9]+(\\.[0-9]+)?/;\nconst STRING = /^'([^\\\\']*(?:\\\\.[^\\z']*)*)'/;\nconst DBLSTRING = /^\"([^\\\\\"]*(?:\\\\.[^\\\\\"]*)*)\"/;\n\n\nexport const types = ['BOOLEAN', 'NUMBER', 'DBLSTRING', 'STRING'];\nexport const reserved = []\n  .concat(SQL_CONDITIONALS)\n  .concat(SUB_SELECT_UNARY_OP)\n  .concat(SUB_SELECT_OP)\n  .concat(SQL_SORT_ORDERS);\n\nexport default function Lexer(sql, opts = {}) {\n  let bytesConsumed;\n  let tokens = [];\n  let currentLine = 1;\n  let preserveWhitespace = opts.preserveWhitespace || false;\n\n  let chunk;\n  let i = 0;\n  while (chunk = sql.slice(i)) {\n    bytesConsumed = getbytesConsumed();\n    if (bytesConsumed < 1) throw Error(\"NOTHING CONSUMED: Stopped at - '\" + (chunk.slice(0, 30)) + \"'\");\n    i += bytesConsumed;\n  }\n  token('EOF', '');\n  postProcess();\n\n  return tokens;\n\n\n  function token(name, value) {\n    return tokens.push([name, value, currentLine]);\n  }\n\n  function postProcess() {\n    let ref = tokens;\n    let results = [];\n    let i = 0;\n    let length = tokens.length;\n    let token;\n    let nextToken;\n    for (;i < length; i++) {\n      token = ref[i];\n      if (token[0] === 'STAR') {\n        nextToken = this.tokens[i + 1];\n\n        if (!(nextToken[0] === 'SEPARATOR' || nextToken[0] === 'FROM')) {\n          results.push(token[0] = 'MATH_MULTI');\n        } else {\n          results.push(undefined);\n        }\n      } else {\n        results.push(undefined);\n      }\n    }\n    return results;\n  }\n\n  function tokenizeFromRegex(name, regex, part, lengthPart, output) {\n    let match;\n    let partMatch;\n    if (part == null) part = 0;\n    if (lengthPart == null) lengthPart = part;\n    if (output == null) output = true;\n    if (!(match = regex.exec(chunk))) return 0;\n    partMatch = match[part];\n    if (output) token(name, partMatch);\n    return match[lengthPart].length;\n  }\n\n  function tokenizeFromWord(name, word) {\n    let match;\n    let matcher;\n    if (word == null) word = name;\n    word = regexEscape(word);\n    matcher = /^\\w+$/.test(word) ? new RegExp(\"^(\" + word + \")\\\\b\", 'ig') : new RegExp(\"^(\" + word + \")\", 'ig');\n    match = matcher.exec(chunk);\n    if (!match) return 0;\n    token(name, match[1]);\n    return match[1].length;\n  }\n\n  function tokenizeFromList(name, list) {\n    let entry;\n    let ret = 0;\n    let i = 0;\n    let len = list.length;\n    for (; i < len; i++) {\n      entry = list[i];\n      ret = tokenizeFromWord(name, entry);\n      if (ret > 0) break;\n    }\n    return ret;\n  }\n\n  function keywordToken() {\n    return tokenizeFromWord('SELECT')\n      || tokenizeFromWord('DISTINCT')\n      || tokenizeFromWord('FROM')\n      || tokenizeFromWord('WHERE')\n      || tokenizeFromWord('GROUP')\n      || tokenizeFromWord('ORDER')\n      || tokenizeFromWord('BY')\n      || tokenizeFromWord('HAVING')\n      || tokenizeFromWord('LIMIT')\n      || tokenizeFromWord('JOIN')\n      || tokenizeFromWord('LEFT')\n      || tokenizeFromWord('RIGHT')\n      || tokenizeFromWord('INNER')\n      || tokenizeFromWord('OUTER')\n      || tokenizeFromWord('ON')\n      || tokenizeFromWord('AS')\n      || tokenizeFromWord('UNION')\n      || tokenizeFromWord('ALL')\n      || tokenizeFromWord('LIMIT')\n      || tokenizeFromWord('OFFSET')\n      || tokenizeFromWord('FETCH')\n      || tokenizeFromWord('ROW')\n      || tokenizeFromWord('ROWS')\n      || tokenizeFromWord('ONLY')\n      || tokenizeFromWord('NEXT')\n      || tokenizeFromWord('FIRST');\n  }\n\n  function dotToken() {\n    return tokenizeFromWord('DOT', '.');\n  }\n\n  function operatorToken() {\n    return tokenizeFromList('OPERATOR', SQL_OPERATORS);\n  }\n\n  function mathToken() {\n    return tokenizeFromList('MATH', MATH) || tokenizeFromList('MATH_MULTI', MATH_MULTI);\n  }\n\n  function conditionalToken() {\n    return tokenizeFromList('CONDITIONAL', SQL_CONDITIONALS);\n  }\n\n  function subSelectOpToken() {\n    return tokenizeFromList('SUB_SELECT_OP', SUB_SELECT_OP);\n  }\n\n  function subSelectUnaryOpToken() {\n    return tokenizeFromList('SUB_SELECT_UNARY_OP', SUB_SELECT_UNARY_OP);\n  }\n\n  function functionToken() {\n    return tokenizeFromList('FUNCTION', SQL_FUNCTIONS);\n  }\n\n  function sortOrderToken() {\n    return tokenizeFromList('DIRECTION', SQL_SORT_ORDERS);\n  }\n\n  function booleanToken() {\n    return tokenizeFromList('BOOLEAN', BOOLEAN);\n  }\n\n  function starToken() {\n    return tokenizeFromRegex('STAR', STAR);\n  }\n\n  function seperatorToken() {\n    return tokenizeFromRegex('SEPARATOR', SEPARATOR);\n  }\n\n  function literalToken() {\n    return tokenizeFromRegex('LITERAL', LITERAL, 1, 0);\n  }\n\n  function numberToken() {\n    return tokenizeFromRegex('NUMBER', NUMBER);\n  }\n\n  function parameterToken() {\n    return tokenizeFromRegex('PARAMETER', PARAMETER);\n  }\n\n  function stringToken() {\n    return tokenizeFromRegex('STRING', STRING, 1, 0) || tokenizeFromRegex('DBLSTRING', DBLSTRING, 1, 0);\n  }\n\n  function parensToken() {\n    return tokenizeFromRegex('LEFT_PAREN', /^\\(/) || tokenizeFromRegex('RIGHT_PAREN', /^\\)/);\n  }\n\n  function windowExtension() {\n    let match = /^\\.(win):(length|time)/i.exec(chunk);\n    if (!match) return 0;\n    token('WINDOW', match[1]);\n    token('WINDOW_FUNCTION', match[2]);\n    return match[0].length;\n  }\n\n  function whitespaceToken() {\n    let match;\n    if (!(match = WHITESPACE.exec(chunk))) return 0;\n    let partMatch = match[0];\n    let newlines = partMatch.replace(/[^\\n]/, '').length;\n    currentLine += newlines;\n    if (preserveWhitespace) {\n      token(name, partMatch);\n    }\n    return partMatch.length;\n  }\n\n  function regexEscape(str) {\n    return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  function getbytesConsumed() {\n    return keywordToken()\n      || starToken()\n      || booleanToken()\n      || functionToken()\n      || windowExtension()\n      || sortOrderToken()\n      || seperatorToken()\n      || operatorToken()\n      || mathToken()\n      || dotToken()\n      || conditionalToken()\n      || subSelectOpToken()\n      || subSelectUnaryOpToken()\n      || numberToken()\n      || stringToken()\n      || parameterToken()\n      || parensToken()\n      || whitespaceToken()\n      || literalToken();\n  }\n}\n","import { default as lexer, reserved, types} from './lexer';\nimport { formatType, formatAttrAlias } from './utils';\n\nexport default function parseQuery(query, hash, range, useKeyCondition) {\n  let KeyConditionExpression = '';\n  let attributes = {};\n  let values = {};\n  query = lexer(query).reduce((a, b) => {\n    if (b[0] === 'LITERAL' && !reserved.includes(b[1])) {\n      if (useKeyCondition && hash && b[1] === hash) {\n        KeyConditionExpression += ` #${b[1]}`;\n      } else if (useKeyCondition && range && b[1] === range) {\n        KeyConditionExpression += `, #${b[1]}`;\n      } else {\n        a += ` #${b[1]}`;\n      }\n      attributes[`#${b[1]}`] = b[1];\n    } else if (types.indexOf(b[0]) !== -1) {\n      let attrAlias = formatAttrAlias(b[1]);\n      values[`:${attrAlias}`] = formatType(b[0], b[1]);\n      a += ` :${attrAlias}`;\n    } else a += ` ${b[1]}`;\n\n    return a;\n  }, '');\n\n  let returnObj = {\n    FilterExpression: query.trim(),\n    ExpressionAttributeNames: attributes,\n    ExpressionAttributeValues: values\n  };\n  if (useKeyCondition) returnObj.KeyConditionExpression = KeyConditionExpression;\n  return returnObj;\n}\n","import { noop, fixCallback } from './utils';\nimport { get as getDB } from './db';\nimport parseQuery from './parser';\n\nexport default function wrapper(table, hash, range) {\n  return {\n    scan: scann(table),\n    query: query(table, hash, range),\n    get: get(table, hash, range),\n    put: put(table, hash, range),\n    update: update(table, hash, range),\n    del: del(table, hash, range)\n  };\n}\n\nexport function scan(table) {\n  return (query, callback = noop) => {\n    db.scan(Object.assign(obj, parseQuery(query)), callback);\n  };\n}\n\nexport function query(table, hash, range) {\n  return (query, callback = noop) => {\n    db.query(Object.assign({ TableName: table }, parseQuery(query, hash, range, true)), callback);\n  };\n}\n\nexport function get(table, hash, range) {\n  return (hashValue, rangeValue) => {\n    let Key = {};\n    Key[hash] = hashValue;\n    if (range && rangeValue !== undefined) Key[range] = rangeValue;\n    getDB().get({\n      TableName: table,\n      Key: Key\n    }, fixCallback(arguments[arguments.length-1]));\n  };\n}\n\nexport function put(table) {\n  return (item, callback = noop) => {\n    db.put({\n      TableName: table,\n      Item: item\n    }, callback);\n  };\n}\n\nexport function update(table, hash, range) {\n  return (query, hashValue, rangeValue, callback) => {\n    callback = typeof rangeValue === 'function' ? rangeValue : callback;\n    let Key = {};\n    Key[hash] = hashValue;\n    if (range && rangeValue !== undefined) Key[range] = rangeValue;\n    let data = {\n      FilterExpression: UpdateExpression,\n      ExpressionAttributeNames,\n      ExpressionAttributeValues\n    } = parseQuery(query);\n    db.update(Object.assign({ TableName: table, Key: Key }, data), fixCallback(callback));\n  };\n}\n\nexport function del(table, hash, range) {\n  return (item, hashValue, rangeValue) => {\n    let Key = {};\n    Key[hash] = hashValue;\n    if (range && rangeValue !== undefined) Key[range] = rangeValue;\n    db.delete({\n      TableName: table,\n      Key: Key\n    }, fixCallback(arguments[arguments.length-1]));\n  };\n}\n","import { setup as setupdb } from './db';\nimport * as dc from './documentClient';\n\n\nexport default function (config = {}) {\n  setupdb(\n    config.accessKey || 'cUniqueSessionID',\n    config.secret || 'SECRET',\n    config.region || 'us-west-2',\n    config.endpoint || 'http://localhost:8000'\n  );\n  return dc;\n}\n"],"names":["setup","accessKey","secret","region","endpoint","AWS","config","update","accessKeyId","secretAccessKey","db","DynamoDB","DocumentClient","get","formatType","type","value","parseFloat","formatAttrAlias","attr","replace","fixCallback","callback","noop","Lexer","sql","opts","token","name","tokens","push","currentLine","tokenizeFromRegex","regex","part","lengthPart","output","let","match","partMatch","exec","chunk","length","tokenizeFromWord","word","matcher","regexEscape","test","RegExp","tokenizeFromList","list","entry","ret","i","len","keywordToken","dotToken","operatorToken","SQL_OPERATORS","mathToken","MATH","MATH_MULTI","conditionalToken","SQL_CONDITIONALS","subSelectOpToken","SUB_SELECT_OP","subSelectUnaryOpToken","SUB_SELECT_UNARY_OP","functionToken","SQL_FUNCTIONS","sortOrderToken","SQL_SORT_ORDERS","booleanToken","BOOLEAN","starToken","STAR","seperatorToken","SEPARATOR","literalToken","LITERAL","numberToken","NUMBER","parameterToken","PARAMETER","stringToken","STRING","DBLSTRING","parensToken","windowExtension","whitespaceToken","WHITESPACE","newlines","preserveWhitespace","str","bytesConsumed","slice","Error","nextToken","ref","results","this","undefined","postProcess","parseQuery","query","hash","range","useKeyCondition","KeyConditionExpression","attributes","values","returnObj","FilterExpression","lexer","reduce","a","b","reserved","includes","types","indexOf","attrAlias","trim","ExpressionAttributeNames","ExpressionAttributeValues","table","Object","assign","TableName","hashValue","rangeValue","Key","getDB","arguments","put","item","Item","data","UpdateExpression","del","delete","const","require","concat","scan","scann","obj","setupdb","dc"],"mappings":"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"}